# ==============================================================================
# URLs DE AUTENTICA√á√ÉO - SISTEMA DE C√ìDIGO
# ==============================================================================

# Arquivo: backend/accounts/urls.py
# ADICIONE as novas URLs para sistema de c√≥digo
# MANTENHA todas as URLs existentes

from django.urls import path
from rest_framework_simplejwt.views import (
    TokenRefreshView,  # Para refresh de tokens JWT
)

from .views import (
    RegisterView,
    LoginView,
    LogoutView,
    UserProfileView,
    PasswordResetView,
    PasswordResetConfirmView,
    PasswordResetCodeCheckView,  # üÜï NOVA VIEW
    UserListView,
    UserDetailView,
    UserActivationView,
    debug_user_info,
    debug_permissions_test,
    debug_endpoints,
    debug_password_reset_codes,  # üÜï NOVA VIEW
    debug_generate_test_code,     # üÜï NOVA VIEW
)

# ==============================================================================
# üìã MAPEAMENTO DE URLs ATUALIZADO
# ==============================================================================

"""
üéØ ESTRUTURA ATUALIZADA DOS ENDPOINTS:

AUTENTICA√á√ÉO:
- POST   /api/auth/register/           ‚Üí RegisterView
- POST   /api/auth/login/              ‚Üí LoginView  
- POST   /api/auth/logout/             ‚Üí LogoutView
- POST   /api/auth/token/refresh/      ‚Üí TokenRefreshView (do SimpleJWT)

PERFIL:
- GET    /api/auth/user/               ‚Üí UserProfileView (ver perfil)
- PUT    /api/auth/user/               ‚Üí UserProfileView (editar perfil)
- PATCH  /api/auth/user/               ‚Üí UserProfileView (editar parcial)

GERENCIAMENTO DE USU√ÅRIOS:
- GET    /api/auth/users/              ‚Üí UserListView (listar usu√°rios)
- GET    /api/auth/users/{id}/         ‚Üí UserDetailView (detalhes usu√°rio)
- PATCH  /api/auth/users/{id}/activate/    ‚Üí UserActivationView (ativar)
- PATCH  /api/auth/users/{id}/deactivate/  ‚Üí UserActivationView (desativar)

üîÑ RESET DE SENHA - SISTEMA DE C√ìDIGO:
- POST   /api/auth/password/reset/     ‚Üí PasswordResetView (envio de c√≥digo)
- POST   /api/auth/password/confirm/   ‚Üí PasswordResetConfirmView (confirmar com c√≥digo)
- POST   /api/auth/password/check-code/ ‚Üí PasswordResetCodeCheckView (verificar c√≥digo)
- GET    /api/auth/password/check-code/{code}/ ‚Üí PasswordResetCodeCheckView (verificar c√≥digo via GET)

üõ†Ô∏è DEBUGGING - SISTEMA DE C√ìDIGO:
- GET    /api/auth/debug/              ‚Üí debug_user_info
- GET    /api/auth/debug/permissions/  ‚Üí debug_permissions_test
- GET    /api/auth/debug/reset-codes/  ‚Üí debug_password_reset_codes (üÜï NOVO)
- POST   /api/auth/debug/generate-code/ ‚Üí debug_generate_test_code (üÜï NOVO)
- GET    /api/auth/endpoints/          ‚Üí debug_endpoints
"""

app_name = 'accounts'  # Namespace para as URLs

urlpatterns = [
    # ==============================================================================
    # üîê ENDPOINTS DE AUTENTICA√á√ÉO
    # ==============================================================================
    
    path(
        'register/',
        RegisterView.as_view(),
        name='register'
    ),
    
    path(
        'login/',
        LoginView.as_view(),
        name='login'
    ),
    
    path(
        'logout/',
        LogoutView.as_view(),
        name='logout'
    ),
    
    # ==============================================================================
    # üé´ ENDPOINTS DE TOKEN JWT
    # ==============================================================================
    
    path(
        'token/refresh/',
        TokenRefreshView.as_view(),
        name='token_refresh'
    ),
    
    # ==============================================================================
    # üë§ ENDPOINTS DE PERFIL
    # ==============================================================================
    
    path(
        'user/',
        UserProfileView.as_view(),
        name='user_profile'
    ),
    
    # ==============================================================================
    # üîÑ ENDPOINTS DE RESET DE SENHA - SISTEMA DE C√ìDIGO
    # ==============================================================================
    
    path(
        'password/reset/',
        PasswordResetView.as_view(),
        name='password_reset'
    ),
    
    path(
        'password/confirm/',
        PasswordResetConfirmView.as_view(),
        name='password_reset_confirm'
    ),
    
    # üÜï NOVO: Verificar c√≥digo sem consumir
    path(
        'password/check-code/',
        PasswordResetCodeCheckView.as_view(),
        name='password_check_code'
    ),
    
    # üÜï NOVO: Verificar c√≥digo via GET
    path(
        'password/check-code/<str:code>/',
        PasswordResetCodeCheckView.as_view(),
        name='password_check_code_get'
    ),
    
    # ==============================================================================
    # üë• ENDPOINTS DE GERENCIAMENTO DE USU√ÅRIOS
    # ==============================================================================
    
    path(
        'users/',
        UserListView.as_view(),
        name='user_list'
    ),
    
    path(
        'users/<int:pk>/',
        UserDetailView.as_view(),
        name='user_detail'
    ),
    
    path(
        'users/<int:pk>/activate/',
        UserActivationView.as_view(),
        {'action': 'activate'},
        name='user_activate'
    ),
    
    path(
        'users/<int:pk>/deactivate/',
        UserActivationView.as_view(),
        {'action': 'deactivate'},
        name='user_deactivate'
    ),

    # ==============================================================================
    # üõ†Ô∏è ENDPOINTS DE DEBUGGING
    # ==============================================================================
    
    path(
        'debug/',
        debug_user_info,
        name='debug_user_info'
    ),
    
    path(
        'debug/permissions/',
        debug_permissions_test,
        name='debug_permissions'
    ),
    
    # üÜï NOVO: Debug de c√≥digos de reset
    path(
        'debug/reset-codes/',
        debug_password_reset_codes,
        name='debug_reset_codes'
    ),
    
    # üÜï NOVO: Gerar c√≥digo de teste
    path(
        'debug/generate-code/',
        debug_generate_test_code,
        name='debug_generate_code'
    ),
    
    path(
        'endpoints/',
        debug_endpoints,
        name='debug_endpoints'
    ),
]

# ==============================================================================
# üìù DOCUMENTA√á√ÉO DOS NOVOS ENDPOINTS
# ==============================================================================

"""
üéØ NOVOS ENDPOINTS ADICIONADOS:

1. **POST /api/auth/password/check-code/**
   - Verifica se c√≥digo est√° v√°lido (sem consumir)
   - Body: {"code": "123456"}
   - Retorna: validity, tempo restante, tentativas usadas

2. **GET /api/auth/password/check-code/{code}/**
   - Mesma funcionalidade via GET
   - Ex: GET /api/auth/password/check-code/123456/

3. **GET /api/auth/debug/reset-codes/** (Admin only)
   - Lista todos os c√≥digos de reset ativos
   - √ötil para debugging
   - Mostra: usu√°rio, c√≥digo, expira√ß√£o, tentativas

4. **POST /api/auth/debug/generate-code/** (Admin only)  
   - Gera c√≥digo de teste para usu√°rio espec√≠fico
   - Body: {"email": "user@test.com"}
   - Retorna o c√≥digo gerado (apenas em debug)

üîß COMO TESTAR:

1. **Fluxo completo:**
   POST /api/auth/password/reset/ {"email": "user@test.com"}
   ‚Üí Email enviado com c√≥digo
   POST /api/auth/password/confirm/ {"code": "123456", "new_password": "nova123", "confirm_password": "nova123"}

2. **Verificar c√≥digo:**
   POST /api/auth/password/check-code/ {"code": "123456"}
   ‚Üí Retorna se c√≥digo √© v√°lido

3. **Debug (admin):**
   GET /api/auth/debug/reset-codes/
   ‚Üí Lista todos os c√≥digos ativos

üö® IMPORTANTE:
- Os endpoints antigos continuam funcionando
- O sistema √© retrocompat√≠vel
- C√≥digos expiram em 30 minutos
- M√°ximo 3 tentativas por c√≥digo
"""