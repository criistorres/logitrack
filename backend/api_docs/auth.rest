# ==============================================================================
# LOGITRACK - DOCUMENTA√á√ÉO DA API DE AUTENTICA√á√ÉO
# ==============================================================================
# 
# üìã INSTRU√á√ïES:
# 1. Instale a extens√£o "REST Client" no VS Code
# 2. Execute cada requisi√ß√£o clicando em "Send Request" acima de cada ###
# 3. Acompanhe as respostas e use para debugging
# 4. IMPORTANTE: Execute na ordem indicada para melhor experi√™ncia
#
# üéØ ORDEM RECOMENDADA PARA TESTES:
# 1. Listar endpoints dispon√≠veis
# 2. Registrar um usu√°rio
# 3. Fazer login
# 4. Ver perfil do usu√°rio
# 5. Atualizar perfil
# 6. Fazer logout
#
# ==============================================================================

# VARI√ÅVEIS GLOBAIS (atualize conforme necess√°rio)
@baseURL = http://localhost:8000
@authURL = {{baseURL}}/api/auth

# Vari√°veis para tokens (ser√£o preenchidas automaticamente ap√≥s login)
@accessToken = 
@refreshToken = 

# ==============================================================================
# üè† 1. ENDPOINT RAIZ - INFORMA√á√ïES DA API
# ==============================================================================

### 1.1 Verificar se API est√° funcionando
GET {{baseURL}}
Content-Type: application/json

# Esperado: Informa√ß√µes b√°sicas da API e lista de endpoints


# ==============================================================================
# üìã 2. LISTAR ENDPOINTS DISPON√çVEIS (DEBUGGING)
# ==============================================================================

### 2.1 Ver todos os endpoints de autentica√ß√£o
GET {{authURL}}/endpoints/
Content-Type: application/json

# Esperado: Lista completa de todos os endpoints dispon√≠veis


# ==============================================================================
# üìù 3. REGISTRO DE USU√ÅRIO
# ==============================================================================

### 3.1 Registrar novo usu√°rio (TESTE B√ÅSICO)
POST {{authURL}}/register/
Content-Type: application/json

{
    "email": "motorista1@teste.com",
    "password": "senha123456",
    "password_confirm": "senha123456",
    "first_name": "Jo√£o",
    "last_name": "Silva",
    "cpf": "12345678901",
    "phone": "11999999999",
    "role": "motorista",
    "cnh_numero": "12345678901",
    "cnh_categoria": "B",
    "cnh_validade": "2025-12-31"
}

# Esperado: 
# - Status 201 Created
# - Dados do usu√°rio criado
# - Access token e refresh token
# 
# üêõ DEBUGGING: 
# - Coloque breakpoint em RegisterView.post()
# - Acompanhe o fluxo pelos m√©todos validate do serializer


### 3.2 Registrar usu√°rio da log√≠stica
POST {{authURL}}/register/
Content-Type: application/json

{
    "email": "logistica1@teste.com",
    "password": "senha123456",
    "password_confirm": "senha123456",
    "first_name": "Maria",
    "last_name": "Santos",
    "cpf": "10987654321",
    "phone": "11888888888",
    "role": "logistica"
}

### 3.3 Teste de erro - senhas n√£o coincidem
POST {{authURL}}/register/
Content-Type: application/json

{
    "email": "erro1@teste.com",
    "password": "senha123456",
    "password_confirm": "senha654321",
    "first_name": "Teste",
    "last_name": "Erro",
    "cpf": "11111111111"
}

# Esperado: 
# - Status 400 Bad Request
# - Erro: "As senhas n√£o coincidem"

### 3.4 Teste de erro - email duplicado
POST {{authURL}}/register/
Content-Type: application/json

{
    "email": "motorista1@teste.com",
    "password": "senha123456",
    "password_confirm": "senha123456",
    "first_name": "Duplicado",
    "last_name": "Email",
    "cpf": "22222222222"
}

# Esperado: 
# - Status 400 Bad Request
# - Erro: "Este email j√° est√° em uso"


# ==============================================================================
# üîê 4. LOGIN
# ==============================================================================

### 4.1 Login com usu√°rio v√°lido
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "motorista1@teste.com",
    "password": "senha123456"
}

# Esperado:
# - Status 200 OK
# - Access token e refresh token
# - Dados do usu√°rio
#
# üö® IMPORTANTE: Copie o access_token da resposta para usar nos pr√≥ximos testes
#
# üêõ DEBUGGING:
# - Coloque breakpoint em LoginView.post()
# - Acompanhe como o authenticate() funciona no serializer

### 4.2 Login com credenciais inv√°lidas
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "motorista1@teste.com",
    "password": "senhaerrada"
}

# Esperado:
# - Status 401 Unauthorized
# - Erro: "Credenciais inv√°lidas"

### 4.3 Login com email inexistente
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "naoexiste@teste.com",
    "password": "senha123456"
}

# Esperado:
# - Status 401 Unauthorized
# - Erro: "Credenciais inv√°lidas"


# ==============================================================================
# üë§ 5. PERFIL DO USU√ÅRIO (REQUER AUTENTICA√á√ÉO)
# ==============================================================================

### 5.1 Ver dados do usu√°rio logado
GET {{authURL}}/user/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

# üö® SUBSTITUA "SEU_TOKEN_AQUI" pelo access_token obtido no login!
#
# Esperado:
# - Status 200 OK
# - Dados completos do usu√°rio
#
# üêõ DEBUGGING:
# - Coloque breakpoint em UserProfileView.get()
# - Observe como request.user √© populado automaticamente pelo JWT

### 5.2 Atualizar dados do usu√°rio
PUT {{authURL}}/user/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

{
    "first_name": "Jo√£o Atualizado",
    "last_name": "Silva Santos",
    "phone": "11999998888"
}

# Esperado:
# - Status 200 OK
# - Dados atualizados do usu√°rio
#
# üêõ DEBUGGING:
# - Coloque breakpoint em UserProfileView.update()
# - Acompanhe o m√©todo update() do serializer

### 5.3 Teste sem token (deve dar erro)
GET {{authURL}}/user/
Content-Type: application/json

# Esperado:
# - Status 401 Unauthorized
# - Erro de autentica√ß√£o


# ==============================================================================
# üõ†Ô∏è 6. ENDPOINTS DE DEBUGGING
# ==============================================================================

### 6.1 Ver informa√ß√µes detalhadas do usu√°rio logado
GET {{authURL}}/debug/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

# Esperado:
# - Informa√ß√µes t√©cnicas do usu√°rio
# - Info sobre o token JWT
# - √ötil para debugging


# ==============================================================================
# üîÑ 7. REFRESH TOKEN
# ==============================================================================

### 7.1 Renovar access token usando refresh token
POST {{authURL}}/token/refresh/
Content-Type: application/json

{
    "refresh": "SEU_REFRESH_TOKEN_AQUI"
}

# üö® SUBSTITUA "SEU_REFRESH_TOKEN_AQUI" pelo refresh_token obtido no login!
#
# Esperado:
# - Status 200 OK
# - Novo access token


# ==============================================================================
# üö™ 8. LOGOUT
# ==============================================================================

### 8.1 Fazer logout (blacklist do refresh token)
POST {{authURL}}/logout/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

{
    "refresh": "SEU_REFRESH_TOKEN_AQUI"
}

# Esperado:
# - Status 200 OK
# - Confirma√ß√£o de logout
# - O refresh token deve ficar inv√°lido ap√≥s isso

### 8.2 Tentar usar refresh token ap√≥s logout (deve dar erro)
POST {{authURL}}/token/refresh/
Content-Type: application/json

{
    "refresh": "SEU_REFRESH_TOKEN_AQUI"
}

# Esperado:
# - Status 401 Unauthorized
# - Token est√° na blacklist


# ==============================================================================
# üîÑ 9. RESET DE SENHA
# ==============================================================================

### 9.1 Solicitar reset de senha
POST {{authURL}}/password/reset/
Content-Type: application/json

{
    "email": "ctorres@beautyservices.com.br"
}

# Esperado:
# - Status 200 OK
# - Mensagem sobre envio do email (simulado)

### 9.2 Confirmar nova senha
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "email": "motorista1@teste.com",
    "new_password": "novaSenha123456",
    "confirm_password": "novaSenha123456"
}

# Esperado:
# - Status 200 OK
# - Confirma√ß√£o de senha alterada

### 9.3 Testar login com nova senha
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "motorista1@teste.com",
    "password": "novaSenha123456"
}

# Esperado:
# - Status 200 OK
# - Login bem-sucedido com nova senha


# ==============================================================================
# üë• 11. GERENCIAMENTO DE USU√ÅRIOS (LOG√çSTICA/ADMIN)
# ==============================================================================

### 11.1 Listar todos os usu√°rios (requer log√≠stica/admin)
GET {{authURL}}/users/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

# üö® SUBSTITUA pelo token de um usu√°rio log√≠stica ou admin!
#
# Esperado:
# - Status 200 OK se for log√≠stica/admin
# - Status 403 Forbidden se for motorista
# - Lista de usu√°rios (log√≠stica n√£o v√™ admins)

### 11.2 Ver detalhes de um usu√°rio espec√≠fico
GET {{authURL}}/users/1/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

# Esperado:
# - Status 200 OK se for o pr√≥prio usu√°rio, log√≠stica ou admin
# - Status 403 Forbidden se for outro motorista

### 11.3 Ativar um usu√°rio (requer log√≠stica/admin)
PATCH {{authURL}}/users/1/activate/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

# Esperado:
# - Status 200 OK com confirma√ß√£o
# - Usu√°rio fica ativo (is_active: true)
#
# üêõ DEBUGGING:
# - Coloque breakpoint em UserActivationView.patch()
# - Observe verifica√ß√£o de permiss√µes
# - Acompanhe mudan√ßa no banco de dados

### 11.4 Desativar um usu√°rio (requer log√≠stica/admin)
PATCH {{authURL}}/users/2/deactivate/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

# Esperado:
# - Status 200 OK com confirma√ß√£o
# - Usu√°rio fica inativo (is_active: false)
# - N√£o pode desativar pr√≥pria conta

### 11.5 Teste de permiss√£o - motorista tentando listar usu√°rios (deve dar erro)
GET {{authURL}}/users/
Authorization: Bearer TOKEN_DE_MOTORISTA_AQUI
Content-Type: application/json

# Esperado:
# - Status 403 Forbidden
# - Mensagem sobre permiss√µes insuficientes

### 11.6 Teste de permiss√£o - log√≠stica tentando ativar admin (deve dar erro)
PATCH {{authURL}}/users/ID_DE_ADMIN/activate/
Authorization: Bearer TOKEN_DE_LOGISTICA_AQUI
Content-Type: application/json

# Esperado:
# - Status 403 Forbidden
# - Mensagem sobre n√£o poder modificar admins


# ==============================================================================
# üîê 12. TESTES DE PERMISS√ïES AVAN√áADOS
# ==============================================================================

### 12.1 Teste endpoint restrito a log√≠stica/admin
GET {{authURL}}/debug/permissions/
Authorization: Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.SEU_TOKEN_AQUI
Content-Type: application/json

# üö® Use token de log√≠stica ou admin
# Esperado:
# - Status 200 OK se for log√≠stica/admin
# - Status 403 Forbidden se for motorista

### 12.2 Teste com motorista (deve dar erro)
GET {{authURL}}/debug/permissions/
Authorization: Bearer TOKEN_DE_MOTORISTA_AQUI
Content-Type: application/json

# Esperado:
# - Status 403 Forbidden
# - Verificar logs de permiss√£o


# ==============================================================================
# üéØ 13. FLUXO COMPLETO: ADMIN GERENCIANDO USU√ÅRIOS
# ==============================================================================

### 13.1 Fazer login como admin
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "admin@teste.com",
    "password": "admin123456"
}

# Copie o access_token para usar nos pr√≥ximos testes

### 13.2 Listar todos os usu√°rios
GET {{authURL}}/users/
Authorization: Bearer SEU_TOKEN_ADMIN
Content-Type: application/json

### 13.3 Registrar novo usu√°rio (que ficar√° inativo)
POST {{authURL}}/register/
Content-Type: application/json

{
    "email": "motorista.inativo@teste.com",
    "password": "senha123456",
    "password_confirm": "senha123456",
    "first_name": "Motorista",
    "last_name": "Inativo",
    "cpf": "55555555555",
    "phone": "11555555555",
    "role": "motorista",
    "cnh_numero": "55555555555",
    "cnh_categoria": "B",
    "cnh_validade": "2025-12-31"
}

### 13.4 Tentar fazer login com usu√°rio inativo (deve dar erro)
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "motorista.inativo@teste.com",
    "password": "senha123456"
}

# Esperado: Erro por conta desativada

### 13.5 Ativar o usu√°rio como admin
PATCH {{authURL}}/users/ID_DO_USUARIO_CRIADO/activate/
Authorization: Bearer SEU_TOKEN_ADMIN
Content-Type: application/json

### 13.6 Tentar login novamente (agora deve funcionar)
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "motorista.inativo@teste.com",
    "password": "senha123456"
}

# Esperado: Login bem-sucedido


# ==============================================================================
# üéØ 14. FLUXO COMPLETO: LOG√çSTICA GERENCIANDO MOTORISTAS
# ==============================================================================

### 14.1 Fazer login como log√≠stica
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "logistica1@teste.com",
    "password": "senha123456"
}

### 14.2 Listar usu√°rios (n√£o deve ver admins)
GET {{authURL}}/users/
Authorization: Bearer SEU_TOKEN_LOGISTICA
Content-Type: application/json

### 14.3 Desativar um motorista
PATCH {{authURL}}/users/ID_DO_MOTORISTA/deactivate/
Authorization: Bearer SEU_TOKEN_LOGISTICA
Content-Type: application/json

### 14.4 Tentar desativar admin (deve dar erro)
PATCH {{authURL}}/users/ID_DO_ADMIN/deactivate/
Authorization: Bearer SEU_TOKEN_LOGISTICA
Content-Type: application/json

# Esperado: Status 403 Forbidden


# ==============================================================================
# üìä 15. CEN√ÅRIOS DE ERRO PARA TESTAR VALIDA√á√ïES
# ==============================================================================

### 15.1 Tentar ativar usu√°rio inexistente
PATCH {{authURL}}/users/99999/activate/
Authorization: Bearer SEU_TOKEN_ADMIN
Content-Type: application/json

# Esperado: Status 404 Not Found

### 15.2 Tentar desativar pr√≥pria conta
PATCH {{authURL}}/users/SEU_PROPRIO_ID/deactivate/
Authorization: Bearer SEU_TOKEN_ADMIN
Content-Type: application/json

# Esperado: Status 400 Bad Request

### 15.3 A√ß√£o inv√°lida
PATCH {{authURL}}/users/1/invalidate/
Authorization: Bearer SEU_TOKEN_ADMIN
Content-Type: application/json

# Esperado: Status 404 Not Found (URL n√£o existe)

### 15.4 Sem token de autoriza√ß√£o
GET {{authURL}}/users/
Content-Type: application/json

# Esperado: Status 401 Unauthorized


# ==============================================================================
# üìä 10. TESTES DE DIFERENTES TIPOS DE USU√ÅRIO
# ==============================================================================

### 10.1 Registrar usu√°rio admin
POST {{authURL}}/register/
Content-Type: application/json

{
    "email": "admin@teste.com",
    "password": "admin123456",
    "password_confirm": "admin123456",
    "first_name": "Admin",
    "last_name": "Sistema",
    "cpf": "99999999999",
    "phone": "11777777777",
    "role": "admin"
}

### 10.2 Login como admin
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "admin@teste.com",
    "password": "admin123456"
}


# ==============================================================================
# üìù NOTAS IMPORTANTES PARA DEBUGGING
# ==============================================================================

# üéØ DICAS PARA USAR ESTES TESTES:
#
# 1. Execute na ordem sugerida para melhor experi√™ncia
# 2. Sempre substitua "SEU_TOKEN_AQUI" pelos tokens reais
# 3. Use o VS Code com extens√£o "REST Client"
# 4. Coloque breakpoints nas views e serializers conforme indicado
# 5. Acompanhe os logs no terminal onde o Django est√° rodando
#
# üêõ DEBUGGING AVAN√áADO:
#
# 1. Para ver requisi√ß√µes HTTP detalhadas, adicione no settings.py:
#    LOGGING['loggers']['django.request'] = {
#        'handlers': ['console'],
#        'level': 'DEBUG',
#        'propagate': False,
#    }
#
# 2. Para debug do DRF, use:
#    'rest_framework': {
#        'handlers': ['console'],
#        'level': 'DEBUG',
#        'propagate': False,
#    }
#
# 3. No terminal, voc√™ ver√° logs como:
#    üîç REGISTER VIEW: Iniciando registro
#    üîç VALIDATE_EMAIL chamado com: motorista1@teste.com
#    ‚úÖ Email motorista1@teste.com est√° dispon√≠vel
#    etc.
#
# üîß SOLU√á√ÉO DE PROBLEMAS:
#
# - Erro 500: Verifique logs no terminal
# - Erro 400: Veja detalhes na resposta JSON
# - Erro 401: Verifique se token est√° correto e n√£o expirou
# - Erro 404: Verifique se URL est√° correta
#
# ==============================================================================