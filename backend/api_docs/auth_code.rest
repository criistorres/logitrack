# ==============================================================================
# LOGITRACK - TESTES DO SISTEMA DE C√ìDIGO DE RESET DE SENHA
# ==============================================================================
# 
# üìã INSTRU√á√ïES:
# 1. Instale a extens√£o "REST Client" no VS Code
# 2. Execute cada requisi√ß√£o clicando em "Send Request" acima de cada ###
# 3. Acompanhe as respostas e use para debugging
# 4. IMPORTANTE: Execute na ordem indicada para melhor experi√™ncia
#
# üéØ ORDEM RECOMENDADA PARA TESTES DO SISTEMA DE C√ìDIGO:
# 1. Verificar se API est√° funcionando
# 2. Registrar um usu√°rio (se necess√°rio)
# 3. Solicitar c√≥digo de reset por email
# 4. Verificar c√≥digo (opcional)
# 5. Confirmar nova senha com c√≥digo
# 6. Testar login com nova senha
# 7. Endpoints de debugging (admin)
#
# ==============================================================================

# VARI√ÅVEIS GLOBAIS (atualize conforme necess√°rio)
@baseURL = http://localhost:8000
@authURL = {{baseURL}}/api/auth

# Vari√°veis para tokens (ser√£o preenchidas automaticamente ap√≥s login)
@accessToken = 
@refreshToken = 
@adminToken = 

# Vari√°veis para testes de c√≥digo
@testEmail = ctorres@beautyservices.com.br
@testCode = 

# ==============================================================================
# üè† 1. VERIFICA√á√ÉO INICIAL
# ==============================================================================

### 1.1 Verificar se API est√° funcionando
GET {{baseURL}}
Content-Type: application/json

# Esperado: Informa√ß√µes b√°sicas da API

### 1.2 Ver todos os endpoints dispon√≠veis
GET {{authURL}}/endpoints/
Content-Type: application/json

# Esperado: Lista completa incluindo novos endpoints de c√≥digo

# ==============================================================================
# üë§ 2. PREPARAR USU√ÅRIO PARA TESTE (SE NECESS√ÅRIO)
# ==============================================================================

### 2.1 Registrar usu√°rio para teste (se n√£o existir)
POST {{authURL}}/register/
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "senha123456",
    "password_confirm": "senha123456",
    "first_name": "Motorista",
    "last_name": "Teste",
    "cpf": "12345678901",
    "phone": "11999999999",
    "role": "motorista",
    "cnh_numero": "12345678901",
    "cnh_categoria": "B",
    "cnh_validade": "2025-12-31"
}

# Nota: Se usu√°rio j√° existir, receber√° erro, mas √© normal

### 2.2 Fazer login para ativar usu√°rio (se necess√°rio)
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "Laura1"
}

# Copie o access_token se login for bem-sucedido

# ==============================================================================
# üîÑ 3. SISTEMA DE C√ìDIGO - FLUXO PRINCIPAL
# ==============================================================================

### 3.1 Solicitar c√≥digo de reset por email
POST {{authURL}}/password/reset/
Content-Type: application/json

{
    "email": "{{testEmail}}"
}

# üéØ NOVO COMPORTAMENTO:
# - Gera c√≥digo de 6 d√≠gitos ao inv√©s de token longo
# - Email √© enviado com c√≥digo destacado
# - C√≥digo expira em 30 minutos
# - M√°ximo 3 tentativas por c√≥digo
#
# Esperado:
# - Status 200 OK (sempre por seguran√ßa)
# - Message: "Se o email existir em nossa base, um c√≥digo de redefini√ß√£o foi enviado"
# - Data: expires_in_minutes: 30, max_attempts: 3
#
# üìß VERIFICAR EMAIL:
# - Abra o terminal onde Django est√° rodando
# - Procure por logs como "üìß C√≥digo gerado: 123456"
# - OU se configurou SMTP real, verifique sua caixa de entrada

### 3.2 Solicitar c√≥digo para email inexistente (teste de seguran√ßa)
POST {{authURL}}/password/reset/
Content-Type: application/json

{
    "email": "naoexiste@teste.com"
}

# Esperado:
# - Status 200 OK (sempre por seguran√ßa)
# - Mesma mensagem independente de email existir
# - N√£o revela se email existe ou n√£o

# ==============================================================================
# üîç 4. VERIFICAR C√ìDIGO (ENDPOINT OPCIONAL)
# ==============================================================================

### 4.1 Verificar c√≥digo via POST (substitua 123456 pelo c√≥digo real)
POST {{authURL}}/password/check-code/
Content-Type: application/json

{
    "code": "686186"
}

# üéØ NOVO ENDPOINT:
# - Verifica se c√≥digo est√° v√°lido SEM consumi-lo
# - √ötil para validar antes de mostrar formul√°rio de nova senha
#
# Esperado se c√≥digo v√°lido:
# - Status 200 OK
# - valid: true, expires_in_minutes: X, attempts_used: Y
#
# Esperado se c√≥digo inv√°lido:
# - Status 400 Bad Request
# - valid: false, message explicando o problema

### 4.2 Verificar c√≥digo via GET
GET {{authURL}}/password/check-code/123456/
Content-Type: application/json

# Mesma funcionalidade, mas via GET para facilidade

### 4.3 Verificar c√≥digo inv√°lido (teste de valida√ß√£o)
POST {{authURL}}/password/check-code/
Content-Type: application/json

{
    "code": "000000"
}

# Esperado:
# - Status 400 Bad Request
# - valid: false

### 4.4 Verificar c√≥digo com formato inv√°lido
POST {{authURL}}/password/check-code/
Content-Type: application/json

{
    "code": "12345"
}

# Esperado:
# - Status 400 Bad Request
# - Erro: "C√≥digo deve ter exatamente 6 d√≠gitos num√©ricos"

# ==============================================================================
# üîê 5. CONFIRMAR NOVA SENHA COM C√ìDIGO
# ==============================================================================

### 5.1 Confirmar nova senha com c√≥digo v√°lido
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "686186",
    "new_password": "Laura@!2024",
    "confirm_password": "Laura@!2024"
}

# üéØ NOVO COMPORTAMENTO:
# - Recebe c√≥digo de 6 d√≠gitos ao inv√©s de token longo
# - Valida c√≥digo, expira√ß√£o e tentativas
# - Altera senha e marca c√≥digo como usado
#
# Esperado se c√≥digo v√°lido:
# - Status 200 OK
# - message: "Senha redefinida com sucesso"
# - data: user_email, user_name, changed_at
#
# Esperado se c√≥digo inv√°lido/expirado:
# - Status 400 Bad Request
# - message: "C√≥digo inv√°lido, expirado ou excedeu tentativas"

### 5.2 Tentar usar o mesmo c√≥digo novamente (deve dar erro)
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "123456",
    "new_password": "outraSenha123",
    "confirm_password": "outraSenha123"
}

# Esperado:
# - Status 400 Bad Request
# - Erro: C√≥digo j√° foi usado

### 5.3 Confirmar com senhas que n√£o coincidem
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "123456",
    "new_password": "novaSenha123",
    "confirm_password": "senhasDiferentes123"
}

# Esperado:
# - Status 400 Bad Request
# - Erro: "As senhas n√£o coincidem"

### 5.4 Confirmar com senha fraca
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "123456",
    "new_password": "123",
    "confirm_password": "123"
}

# Esperado:
# - Status 400 Bad Request
# - Erro de valida√ß√£o de senha Django

# ==============================================================================
# ‚úÖ 6. TESTAR LOGIN COM NOVA SENHA
# ==============================================================================

### 6.1 Testar login com senha antiga (deve dar erro)
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "senha123456"
}

# Esperado:
# - Status 401 Unauthorized
# - Erro: "Credenciais inv√°lidas"

### 6.2 Testar login com nova senha (deve funcionar)
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "{{testEmail}}",
    "password": "novaSenha123456"
}

# Esperado:
# - Status 200 OK
# - Tokens JWT v√°lidos
# - Dados do usu√°rio

# ==============================================================================
# üõ†Ô∏è 7. ENDPOINTS DE DEBUGGING (APENAS ADMIN)
# ==============================================================================

### 7.1 Fazer login como admin para testes de debug
POST {{authURL}}/login/
Content-Type: application/json

{
    "email": "admin@teste.com",
    "password": "admin123456"
}

# Copie o access_token e cole na vari√°vel @adminToken acima

### 7.2 Listar todos os c√≥digos de reset (admin only)
GET {{authURL}}/debug/reset-codes/
Authorization: Bearer SEU_TOKEN_ADMIN_AQUI
Content-Type: application/json

# üÜï NOVO ENDPOINT DE DEBUG:
# - Lista todos os c√≥digos de reset no sistema
# - Mostra: usu√°rio, data cria√ß√£o, expira√ß√£o, tentativas, status
# - √ötil para debugging
#
# Esperado:
# - Status 200 OK se for admin
# - Lista de c√≥digos com detalhes
# - Status 403 Forbidden se n√£o for admin

### 7.3 Gerar c√≥digo de teste (admin only)
POST {{authURL}}/debug/generate-code/
Authorization: Bearer SEU_TOKEN_ADMIN_AQUI
Content-Type: application/json

{
    "email": "{{testEmail}}"
}

# üÜï NOVO ENDPOINT DE DEBUG:
# - Gera c√≥digo de teste para usu√°rio espec√≠fico
# - Retorna o c√≥digo gerado (apenas em debug)
# - √ötil para testes automatizados
#
# Esperado:
# - Status 200 OK se for admin
# - code: "123456" (c√≥digo gerado)
# - expires_in_minutes: 30
# - Status 403 Forbidden se n√£o for admin

### 7.4 Tentar usar endpoint de debug como usu√°rio comum (deve dar erro)
GET {{authURL}}/debug/reset-codes/
Authorization: Bearer SEU_TOKEN_USUARIO_COMUM
Content-Type: application/json

# Esperado:
# - Status 403 Forbidden
# - Erro de permiss√£o

# ==============================================================================
# üß™ 8. TESTES DE LIMITE E SEGURAN√áA
# ==============================================================================

### 8.1 Gerar novo c√≥digo para testar tentativas
POST {{authURL}}/password/reset/
Content-Type: application/json

{
    "email": "{{testEmail}}"
}

# Use o c√≥digo gerado nos pr√≥ximos testes

### 8.2 Primeira tentativa com c√≥digo errado
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "000000",
    "new_password": "novaSenha789",
    "confirm_password": "novaSenha789"
}

# Esperado: Erro, attempts_used = 1

### 8.3 Segunda tentativa com c√≥digo errado
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "111111",
    "new_password": "novaSenha789",
    "confirm_password": "novaSenha789"
}

# Esperado: Erro, attempts_used = 2

### 8.4 Terceira tentativa com c√≥digo errado
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "222222",
    "new_password": "novaSenha789",
    "confirm_password": "novaSenha789"
}

# Esperado: Erro, attempts_used = 3

### 8.5 Quarta tentativa (deve ser bloqueada)
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "333333",
    "new_password": "novaSenha789",
    "confirm_password": "novaSenha789"
}

# Esperado:
# - Status 400 Bad Request
# - Erro: "C√≥digo bloqueado por excesso de tentativas"

### 8.6 Tentar usar c√≥digo correto ap√≥s bloqueio (deve dar erro)
POST {{authURL}}/password/confirm/
Content-Type: application/json

{
    "code": "CODIGO_CORRETO_AQUI",
    "new_password": "novaSenha789",
    "confirm_password": "novaSenha789"
}

# Esperado:
# - Status 400 Bad Request
# - C√≥digo est√° bloqueado mesmo sendo correto

# ==============================================================================
# üîÑ 9. TESTE DE EXPIRA√á√ÉO (SIMULA√á√ÉO)
# ==============================================================================

### 9.1 Gerar c√≥digo e aguardar expira√ß√£o (30 minutos)
POST {{authURL}}/password/reset/
Content-Type: application/json

{
    "email": "{{testEmail}}"
}

# Para testar expira√ß√£o, voc√™ pode:
# 1. Aguardar 30 minutos e tentar usar o c√≥digo
# 2. OU modificar temporariamente o tempo de expira√ß√£o no c√≥digo
# 3. OU usar endpoint de debug para verificar c√≥digos expirados

### 9.2 Verificar c√≥digo expirado (ap√≥s 30 minutos)
POST {{authURL}}/password/check-code/
Content-Type: application/json

{
    "code": "CODIGO_GERADO_HA_30_MINUTOS"
}

# Esperado:
# - Status 400 Bad Request
# - Erro: "C√≥digo inv√°lido, expirado ou j√° usado"

# ==============================================================================
# üìä 10. COMPARA√á√ÉO COM SISTEMA ANTERIOR
# ==============================================================================

### 10.1 Testar endpoint antigo (se ainda existir)
GET {{authURL}}/password/test-token/TOKEN_ANTIGO/
Content-Type: application/json

# Este endpoint pode n√£o existir mais ou retornar erro
# O novo sistema usa c√≥digos de 6 d√≠gitos ao inv√©s de tokens longos

# ==============================================================================
# üìù RESUMO DAS MUDAN√áAS
# ==============================================================================

"""
üîÑ PRINCIPAIS MUDAN√áAS NO SISTEMA:

1. **C√ìDIGO DE 6 D√çGITOS:**
   - Antes: token longo (64+ caracteres)
   - Agora: c√≥digo de 6 d√≠gitos (ex: "123456")

2. **EXPIRA√á√ÉO REDUZIDA:**
   - Antes: 24 horas
   - Agora: 30 minutos

3. **LIMITE DE TENTATIVAS:**
   - Antes: 5 tentativas
   - Agora: 3 tentativas

4. **EMAIL PROFISSIONAL:**
   - Antes: link para click
   - Agora: c√≥digo destacado para digitar

5. **NOVOS ENDPOINTS:**
   - POST /api/auth/password/check-code/ (verificar sem consumir)
   - GET /api/auth/debug/reset-codes/ (admin debug)
   - POST /api/auth/debug/generate-code/ (admin debug)

6. **MELHOR SEGURAN√áA:**
   - C√≥digos criptograficamente seguros
   - Evita c√≥digos sequenciais (123456, 000000)
   - Hash SHA-256 para armazenamento

üéØ FLUXO DO USU√ÅRIO:
1. Toca "Esqueci minha senha" no app
2. Digita email
3. Recebe c√≥digo por email
4. Digita c√≥digo no app
5. Escolhe nova senha
6. Pronto!

üîß PARA DESENVOLVEDORES:
- Use endpoints de debug para testar
- Logs detalhados no terminal Django
- C√≥digos vis√≠veis no console em desenvolvimento
- Sistema retrocompat√≠vel
"""

# ==============================================================================
# üéØ PR√ìXIMOS TESTES RECOMENDADOS
# ==============================================================================

# 1. Teste com email real (configure SMTP)
# 2. Teste em dispositivo m√≥vel
# 3. Teste de carga (muitos c√≥digos simult√¢neos)
# 4. Teste de seguran√ßa (force brute)
# 5. Teste de usabilidade (facilidade de digita√ß√£o)