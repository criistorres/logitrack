#!/bin/bash

# ============================================================================
# SCRIPT DE SETUP E EXECU√á√ÉO - CRIAR USU√ÅRIOS E TESTAR OT
# ============================================================================
#
# üìÅ Salvar como: backend/setup_test_users.sh
# üöÄ Executar: chmod +x setup_test_users.sh && ./setup_test_users.sh
#
# ============================================================================

set -e  # Parar execu√ß√£o em caso de erro

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_step() {
    echo -e "${BLUE}üîß $1${NC}"
}

print_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Cabe√ßalho
echo -e "${BLUE}"
echo "============================================================================"
echo "üöÄ SCRIPT DE CRIA√á√ÉO DE USU√ÅRIOS DE TESTE E SIMULA√á√ÉO DE ERRO OT"
echo "============================================================================"
echo -e "${NC}"

# Verificar se estamos no diret√≥rio correto
if [ ! -f "manage.py" ]; then
    print_error "manage.py n√£o encontrado!"
    print_info "Execute este script no diret√≥rio backend/ do projeto"
    exit 1
fi

print_success "Diret√≥rio correto identificado (backend/)"

# Etapa 1: Criar estrutura de diret√≥rios para management commands
print_step "Criando estrutura de diret√≥rios para management commands..."

# Criar diret√≥rios se n√£o existirem
mkdir -p core/management/commands

# Criar arquivos __init__.py se n√£o existirem
touch core/management/__init__.py
touch core/management/commands/__init__.py

print_success "Estrutura de diret√≥rios criada"

# Etapa 2: Verificar se o arquivo do comando existe
COMMAND_FILE="core/management/commands/create_test_users.py"

if [ ! -f "$COMMAND_FILE" ]; then
    print_warning "Arquivo $COMMAND_FILE n√£o encontrado"
    print_info "Certifique-se de ter copiado o c√≥digo Python para este arquivo"
    print_info "Caminho completo: $(pwd)/$COMMAND_FILE"
    
    # Criar um arquivo de exemplo se n√£o existir
    cat > "$COMMAND_FILE" << 'EOF'
# ARQUIVO PLACEHOLDER - SUBSTITUA PELO C√ìDIGO PYTHON FORNECIDO
# Copie o c√≥digo Python completo aqui
print("‚ö†Ô∏è SUBSTITUA ESTE ARQUIVO PELO C√ìDIGO PYTHON FORNECIDO")
EOF
    
    print_error "Arquivo placeholder criado. Substitua pelo c√≥digo Python!"
    exit 1
fi

print_success "Arquivo de comando encontrado"

# Etapa 3: Verificar se o ambiente virtual est√° ativo
if [ -z "$VIRTUAL_ENV" ]; then
    print_warning "Ambiente virtual n√£o detectado"
    print_info "Recomenda-se ativar o ambiente virtual primeiro:"
    print_info "source venv/bin/activate"
    echo ""
    read -p "Deseja continuar mesmo assim? (y/N): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Yy]$ ]]; then
        print_info "Ativando ambiente virtual e tentando novamente..."
        if [ -f "venv/bin/activate" ]; then
            source venv/bin/activate
            print_success "Ambiente virtual ativado"
        else
            print_error "Arquivo venv/bin/activate n√£o encontrado"
            print_info "Crie o ambiente virtual primeiro: python -m venv venv"
            exit 1
        fi
    fi
else
    print_success "Ambiente virtual ativo: $VIRTUAL_ENV"
fi

# Etapa 4: Verificar depend√™ncias
print_step "Verificando depend√™ncias do Django..."

if ! python -c "import django" 2>/dev/null; then
    print_error "Django n√£o instalado!"
    print_info "Instale as depend√™ncias: pip install -r requirements.txt"
    exit 1
fi

print_success "Django instalado"

# Etapa 5: Executar migra√ß√µes (se necess√°rio)
print_step "Verificando status das migra√ß√µes..."

python manage.py showmigrations --plan | grep "\[ \]" > /dev/null && PENDING_MIGRATIONS=true || PENDING_MIGRATIONS=false

if [ "$PENDING_MIGRATIONS" = true ]; then
    print_warning "Migra√ß√µes pendentes detectadas"
    echo ""
    read -p "Deseja aplicar as migra√ß√µes agora? (Y/n): " -n 1 -r
    echo ""
    if [[ ! $REPLY =~ ^[Nn]$ ]]; then
        print_step "Aplicando migra√ß√µes..."
        python manage.py migrate
        print_success "Migra√ß√µes aplicadas"
    else
        print_warning "Migra√ß√µes n√£o aplicadas. Isso pode causar erros."
    fi
else
    print_success "Todas as migra√ß√µes est√£o aplicadas"
fi

# Etapa 6: Executar o comando de cria√ß√£o de usu√°rios
print_step "Executando comando de cria√ß√£o de usu√°rios..."

echo ""
echo "Op√ß√µes dispon√≠veis:"
echo "1. Criar usu√°rios normalmente"
echo "2. For√ßar recria√ß√£o (se j√° existirem)"
echo "3. Apenas criar usu√°rios (pular teste OT)"
echo "4. For√ßar recria√ß√£o + pular teste OT"
echo ""

read -p "Escolha uma op√ß√£o (1-4): " -n 1 -r
echo ""

case $REPLY in
    1)
        print_info "Executando cria√ß√£o normal..."
        python manage.py create_test_users
        ;;
    2)
        print_info "Executando com --force..."
        python manage.py create_test_users --force
        ;;
    3)
        print_info "Executando apenas cria√ß√£o de usu√°rios..."
        python manage.py create_test_users --skip-ot
        ;;
    4)
        print_info "Executando com --force --skip-ot..."
        python manage.py create_test_users --force --skip-ot
        ;;
    *)
        print_info "Op√ß√£o inv√°lida, executando cria√ß√£o normal..."
        python manage.py create_test_users
        ;;
esac

# Etapa 7: Verificar resultados
if [ $? -eq 0 ]; then
    print_success "Comando executado com sucesso!"
    
    echo ""
    print_info "USU√ÅRIOS CRIADOS:"
    echo "üìß Superusu√°rio: ctorres@beautyservices.com.br"
    echo "üîë Senha: Laura@2024"
    echo ""
    echo "üìß Motorista: clara@email.com"
    echo "üîë Senha: Laura@2024"
    
    echo ""
    print_info "PR√ìXIMOS PASSOS:"
    echo "1. Acessar admin Django: python manage.py runserver"
    echo "   URL: http://127.0.0.1:8000/admin/"
    echo ""
    echo "2. Para corrigir o erro de coordenadas GPS:"
    echo "   - Criar nova migra√ß√£o ajustando max_digits"
    echo "   - Aplicar migra√ß√£o"
    echo "   - Testar cria√ß√£o da OT novamente"
    
else
    print_error "Erro na execu√ß√£o do comando!"
    print_info "Verifique os logs acima para detalhes do erro"
fi

echo ""
print_info "Script finalizado!"